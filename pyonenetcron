#!/usr/bin/env python
# GPL. (C) 2007-2009 Paolo Patruno.

# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2 of the License, or 
# (at your option) any later version. 
# 
# This program is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
# GNU General Public License for more details. 
# 
# You should have received a copy of the GNU General Public License 
# along with this program; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA 
# 

from pyonenet.pyonenet_config import *
from pyonenet import daemon
from pyonenet import _version_


pyonenetcron = daemon.Daemon(
        stdin="/dev/null",
        stdout="/dev/null",
        stderr="/dev/null",
        pidfile=lockfile,
        user=user,
        group=group,
        env=None
)



def main(cwd):

    import logging,os,sys,errno,signal,logging.handlers
    import subprocess
    import thread
    import datetime
    import time as timesleep
    import autoradio.autoradio_core

    os.chdir(cwd)

    handler = logging.handlers.RotatingFileHandler(logfile, maxBytes=5000000, backupCount=10)
    formatter=logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")

    handler.setFormatter(formatter)
    #handler.setLevel(logging.DEBUG)

    # Add the log message handler to the root logger
    logging.getLogger('').addHandler(handler)
    logging.getLogger('').setLevel(logging.DEBUG)

    logging.info('Starting up pyonenetd version '+_version_)

    #signal.signal(signal.SIGALRM, signalhandler)

    f = open(timestampfile, "w")
    f.write(str(datetime.datetime.now()))
    f.close()

    #we want to run a single process

    try:

      # now we can start to do our work
      # time constant

      # this is the first and last time that I set now with the current time
      now=datetime.datetime.now()

      first = True

      while ( True):

          scheds=pyonenet.pyonenet_core.schedules([])
          for schedule in scheds.get_all_refine(now):

              scheduledatetime=schedule.scheduledatetime
              media=schedule.media
              type=schedule.type
              emission_done=schedule.emission_done

              if ( emission_done <> None ):
                  # I assume the emission is done if it happen around 3 hours
                  if ( abs(emission_done - scheduledatetime) < datetime.timedelta(minutes=180)): 
                      logging.debug (" %s %s %s schedula already done; ignore it !",type,scheduledatetime,emission_done)
                      continue


              delta=( scheduledatetime - now)
              sec=manageplayer.secondi(delta)
              #schedule for the nest minsched minutes starting from minsched minuti forward
              #if it is the first time I start from minsched minuti in the past
              if (first ): 
                  #recovery events not emitted in a ragionable past time range
                  startschedsec=-60*minsched
              else:
                  startschedsec=60*minsched


              endschedsec = 60*minsched*2
              if ( startschedsec < sec and sec <= endschedsec ):

                  #print "ora schedulata", scheduledatetime
                  #print "ora attuale", datetime.now()

                  #threadschedule=ScheduleProgram(session,function,operation,media,scheduledatetime,obj,shuffle,length)
                  threadschedule=manageplayer.ScheduleProgram(session,schedule)

                  logging.debug (" %s %s programmed for %s seconds forward", type,media,threadschedule.deltasec)
                  threadschedule.start()

          first = False
          sleepsec=minsched/5.*60.

          #now I advance minsched and wait the right time to proced
          now=now+datetime.timedelta(0,60*minsched)
          while ( datetime.datetime.now() < now):

              f = open(timestampfile, "w")
              f.write(str(datetime.datetime.now()))
              f.close()

              logging.debug ( "sleeping for %s seconds:%s  %d",sleepsec,__name__,os.getpid())

              timesleep.sleep(sleepsec)


    except KeyboardInterrupt :

      #print " KeyboardInterrupt"
      logging.info('All threads terminated for keyboard interrupt' )

      return 1

    except SystemExit:

        logging.info('Stopped OK')
        return 0

    except:
      import traceback
      msg = traceback.format_exc()
      logging.error(msg)
      logging.info('Stopping')

      return 2

    else:
      msg = "error without traceback; what happens ?!?!"
      logging.error(msg)
      logging.info('Stopping')

      return 3

    
if __name__ == '__main__':

    import sys, os
    cwd=os.getcwd()

    if pyonenetcron.service():

        sys.stdout.write("Daemon started with pid %d\n" % os.getpid())
        sys.stdout.write("Daemon stdout output\n")
        sys.stderr.write("Daemon stderr output\n")

        sys.exit(main(cwd))  # (this code was run as script)
    
